From d8ffe9d008b32123bd729854685e71d82c3447c1 Mon Sep 17 00:00:00 2001
From: Akizon77 <hytf233g@gmail.com>
Date: Fri, 1 Aug 2025 09:04:28 +0000
Subject: [PATCH] =?UTF-8?q?feat:=20=E4=BC=98=E5=8C=96=E9=80=9A=E7=9F=A5?=
 =?UTF-8?q?=E8=AE=BE=E7=BD=AE=E7=95=8C=E9=9D=A2=EF=BC=8C=E6=B7=BB=E5=8A=A0?=
 =?UTF-8?q?=E6=B6=88=E6=81=AF=E5=8F=91=E9=80=81=E8=80=85=E6=94=AF=E6=8C=81?=
 =?UTF-8?q?=E5=92=8C=E5=AD=97=E6=AE=B5=E9=AA=8C=E8=AF=81?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/pages/admin/settings/notification.tsx | 254 +++++++++-------------
 src/utils/renderProviders.tsx             | 171 ++++++++-------
 2 files changed, 192 insertions(+), 233 deletions(-)

diff --git a/src/pages/admin/settings/notification.tsx b/src/pages/admin/settings/notification.tsx
index 6c77d6f..a62cc36 100644
--- a/src/pages/admin/settings/notification.tsx
+++ b/src/pages/admin/settings/notification.tsx
@@ -3,37 +3,110 @@ import { Text } from "@radix-ui/themes";
 import { updateSettingsWithToast, useSettings } from "@/lib/api";
 import {
   SettingCardButton,
+  SettingCardLabel,
   SettingCardSelect,
   SettingCardShortTextInput,
   SettingCardSwitch,
 } from "@/components/admin/SettingCard";
-import { SettingCardMultiInputCollapse } from "@/components/admin/SettingCardMultiInput";
 import { toast } from "sonner";
 import Loading from "@/components/loading";
 import React from "react";
+import { renderProviderInputs } from "@/utils/renderProviders";
 
 const NotificationSettings = () => {
   const { t } = useTranslation();
   const { settings, loading, error } = useSettings();
-  const [emailHost, setEmailHost] = React.useState(settings.email_host || "");
-  const [emailPort, setEmailPort] = React.useState(settings.email_port || "");
+  const [messageDefs, setMessageDefs] = React.useState<any>({});
+  const [messageList, setMessageList] = React.useState<string[]>([]);
+  const [currentMessageSender, setCurrentMessageSender] = React.useState<string>("");
+  const [messageValues, setMessageValues] = React.useState<any>({});
+  const [messageLoading, setMessageLoading] = React.useState(false);
+  const [messageError, setMessageError] = React.useState("");
+
+  // 拉取所有 message sender 及字段定义
+  React.useEffect(() => {
+    if (loading) return;
+    setMessageLoading(true);
+    fetch("/api/admin/settings/message-sender")
+      .then((res) => res.json())
+      .then((data) => {
+        if (data.status === "success" && data.data) {
+          setMessageDefs(data.data);
+          const senders = Object.keys(data.data);
+          setMessageList(senders);
+          const initialSender =
+            settings.notification_method && senders.includes(settings.notification_method)
+              ? settings.notification_method
+              : senders[0] || "";
+          setCurrentMessageSender(initialSender);
+        } else {
+          setMessageError(data.message || "获取消息通道信息失败");
+        }
+      })
+      .catch(() => setMessageError("获取消息通道信息失败"))
+      .finally(() => setMessageLoading(false));
+  }, [loading, settings.notification_method]);
+
+  // 拉取当前 message sender 的设置
   React.useEffect(() => {
-    setEmailHost(settings.email_host || "");
-    setEmailPort(settings.email_port || "");
-  }, [settings.email_host, settings.email_port]);
-  if (loading) {
+    if (!currentMessageSender) return;
+    setMessageLoading(true);
+    fetch(`/api/admin/settings/message-sender?provider=${currentMessageSender}`)
+      .then((res) => res.json())
+      .then((data) => {
+        if (data.status === "success" && data.data) {
+          try {
+            setMessageValues(JSON.parse(data.data.addition || "{}"));
+          } catch {
+            setMessageValues({});
+          }
+        } else {
+          setMessageError(data.message || "获取设置失败");
+        }
+      })
+      .catch(() => setMessageError("获取设置失败"))
+      .finally(() => setMessageLoading(false));
+  }, [currentMessageSender]);
+
+  // 处理保存
+  const handleMessageSave = async (values: any) => {
+    setMessageLoading(true);
+    setMessageError("");
+    const body = {
+      name: currentMessageSender,
+      addition: JSON.stringify(values),
+    };
+    try {
+      const res = await fetch("/api/admin/settings/message-sender", {
+        method: "POST",
+        headers: { "Content-Type": "application/json" },
+        body: JSON.stringify(body),
+      });
+      const data = await res.json();
+      if (data.status !== "success") {
+        throw new Error(data.message || t("common.error"));
+      } else {
+        setMessageValues(values);
+      }
+      toast.success(t("common.success"));
+    } catch (error) {
+      toast.error(error instanceof Error ? error.message : String(error));
+    }
+    setMessageLoading(false);
+  };
+  if (loading || (!messageLoading && messageList.length === 0 && !messageError)) {
     return <Loading />;
   }
-
   if (error) {
     return <Text color="red">{error}</Text>;
   }
+  if (messageError) {
+    return <Text color="red">{messageError}</Text>;
+  }
 
   return (
     <>
-      <label className="text-xl font-bold">
-        {t("settings.notification.title")}
-      </label>
+      <SettingCardLabel>{t("settings.notification.title")}</SettingCardLabel>
       <SettingCardSwitch
         title={t("settings.notification.enable")}
         description={t("settings.notification.enable_description")}
@@ -45,148 +118,23 @@ const NotificationSettings = () => {
       <SettingCardSelect
         title={t("settings.notification.method")}
         description={t("settings.notification.method_description")}
-        defaultValue={settings.notification_method}
-        options={[
-          { value: "none", label: t("common.none") },
-          { value: "telegram", label: "Telegram" },
-          { value: "email", label: t("settings.notification.email") },
-        ]}
-        OnSave={async (value) => {
-          await updateSettingsWithToast({ notification_method: value }, t);
-        }}
-      />
-      {/* Telegram Settings */}
-      <SettingCardMultiInputCollapse
-        title={t("settings.notification.telegram_title")}
-        description={t("settings.notification.telegram_description")}
-        items={[
-          {
-            tag: "telegram_endpoint",
-            label: t("settings.notification.telegram_endpoint"),
-            type: "short",
-            placeholder: "https://api.telegram.org/bot",
-            defaultValue: settings.telegram_endpoint || "",
-          },
-          {
-            tag: "telegram_bot_token",
-            label: t("settings.notification.telegram_bot_token"),
-            type: "short",
-            placeholder: "1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZ",
-            defaultValue: settings.telegram_bot_token || "",
-          },
-          {
-            tag: "telegram_chat_id",
-            label: "Chat ID",
-            type: "short",
-            placeholder: "1234567890",
-            defaultValue: settings.telegram_chat_id || "",
-          },
-        ]}
-        onSave={async (values) => {
-          if (/^-?\d+$/.test(values.telegram_chat_id) === false) {
-            toast.error(
-              t(
-                "settings.notification.telegram_chat_id_error",
-                "Chat ID must be a number"
-              )
-            );
-            return;
-          }
-          await updateSettingsWithToast(
-            {
-              telegram_bot_token: values.telegram_bot_token,
-              telegram_chat_id: values.telegram_chat_id,
-              telegram_endpoint: values.telegram_endpoint,
-            },
-            t
-          );
+        options={messageList.map((sender) => ({ value: sender, label: sender }))}
+        value={currentMessageSender}
+        OnSave={async (val: string) => {
+          if (val === currentMessageSender) return;
+          await updateSettingsWithToast({ notification_method: val }, t);
+          setCurrentMessageSender(val);
         }}
       />
-      {/* SMTP Settings */}
-      <SettingCardMultiInputCollapse
-        title={t("settings.notification.smtp_title")}
-        description={t("settings.notification.smtp_description")}
-        items={[
-          {
-            tag: "email_host",
-            label: t("settings.notification.smtp_host"),
-            type: "short",
-            placeholder: "smtp.example.com",
-            defaultValue: settings.email_host || "",
-          },
-          {
-            tag: "email_port",
-            label: t("settings.notification.smtp_port"),
-            type: "short",
-            number: true,
-            placeholder: "587",
-            defaultValue: settings.email_port || "",
-          },
-          {
-            tag: "email_username",
-            label: t("settings.notification.smtp_username"),
-            type: "short",
-            placeholder: "user@example.com",
-            defaultValue: settings.email_username || "",
-          },
-          {
-            tag: "email_password",
-            label: t("settings.notification.smtp_password"),
-            type: "short",
-            defaultValue: settings.email_password || "",
-          },
-          {
-            tag: "email_sender",
-            label: t("settings.notification.smtp_sender"),
-            type: "short",
-            placeholder: "me@example.com",
-            defaultValue: settings.email_sender,
-          },
-          {
-            tag: "email_receiver",
-            label: t("settings.notification.smtp_receiver"),
-            type: "short",
-            placeholder: "receiver@example.com",
-            defaultValue: settings.email_receiver || "",
-          },
-        ]}
-        onChange={(values) => {
-          setEmailHost(values.email_host);
-          setEmailPort(values.email_port);
-        }}
-        onSave={async (values) => {
-          const port = Number(values.email_port);
-          if (isNaN(port) || port <= 0) {
-            toast.error("Please enter a valid port number");
-            return;
-          }
-          await updateSettingsWithToast(
-            {
-              email_host: values.email_host,
-              email_port: port,
-              email_username: values.email_username,
-              email_password: values.email_password,
-              email_sender: values.email_sender,
-              email_receiver: values.email_receiver,
-            },
-            t
-          );
-        }}
-      >
-        <SettingCardSwitch
-          title={t("settings.notification.smtp_ssl")}
-          bordless
-          defaultChecked={settings.email_use_ssl}
-          onChange={async (checked) => {
-            await updateSettingsWithToast({ email_use_ssl: checked }, t);
-          }}
-        />
-        <label className="-mt-2 text-sm text-gray-500">
-          {t("settings.notification.smtp_tips", {
-            command: `telnet ${emailHost} ${emailPort}`,
-          })}
-        </label>
-      </SettingCardMultiInputCollapse>
+      {messageLoading ? <Loading/> : renderProviderInputs({
+        currentProvider: currentMessageSender,
+        providerDefs: messageDefs,
+        providerValues: messageValues,
+        translationPrefix: "settings.notification",
+        setProviderValues: setMessageValues,
+        handleSave: handleMessageSave,
+        t,
+      })}
       <SettingCardButton
         title={t("settings.notification.test_title")}
         description={t("settings.notification.test_description")}
@@ -218,9 +166,7 @@ const NotificationSettings = () => {
       >
         GO
       </SettingCardButton>
-      <label className="text-xl font-bold">
-        {t("admin.notification.expire_title")}
-      </label>
+      <SettingCardLabel>{t("admin.notification.expire_title")}</SettingCardLabel>
       <SettingCardSwitch
         defaultChecked={settings.expire_notification_enabled}
         title={t("admin.notification.expire_enable")}
diff --git a/src/utils/renderProviders.tsx b/src/utils/renderProviders.tsx
index b406499..58c66d4 100644
--- a/src/utils/renderProviders.tsx
+++ b/src/utils/renderProviders.tsx
@@ -1,92 +1,105 @@
 import {
-  SettingCardSelect,
-  SettingCardSwitch,
+    SettingCardSelect,
+    SettingCardSwitch,
 } from "@/components/admin/SettingCard";
 import { SettingCardMultiInputCollapse } from "@/components/admin/SettingCardMultiInput";
 import { toast } from "sonner";
 
 interface RenderProviderInputsProps {
-  currentProvider: string;
-  providerDefs: any;
-  providerValues: any;
-  translationPrefix?: string;
-  footer?: React.ReactNode | string;
-  setProviderValues: (updater: (prev: any) => any) => void;
-  handleSave: (values: any) => Promise<void>;
-  t: any;
+    currentProvider: string;
+    providerDefs: any;
+    providerValues: any;
+    translationPrefix?: string;
+    footer?: React.ReactNode | string;
+    setProviderValues: (updater: (prev: any) => any) => void;
+    handleSave: (values: any) => Promise<void>;
+    t: any;
 }
 
 export const renderProviderInputs = ({
-  currentProvider,
-  providerDefs,
-  providerValues,
-  translationPrefix,
-  footer,
-  setProviderValues,
-  handleSave,
-  t,
+    currentProvider,
+    providerDefs,
+    providerValues,
+    translationPrefix,
+    footer,
+    setProviderValues,
+    handleSave,
+    t,
 }: RenderProviderInputsProps) => {
 
-  if (!currentProvider || !providerDefs[currentProvider]) return null;
-  
-  const fields = providerDefs[currentProvider];
-  const selectFields = fields.filter((f: any) => f.type === "option" && f.options);
-  const switchFields = fields.filter((f: any) => f.type === "bool");
-  const inputFields = fields.filter((f: any) => f.type !== "option" && f.type !== "bool");
+    if (!currentProvider || !providerDefs[currentProvider]) return null;
 
-  return (
-    <div key={currentProvider}>
-      {selectFields.map((f: any) => (
-        <SettingCardSelect
-          key={f.name}
-          title={String(t(`${translationPrefix}.${f.name}`, f.name))}
-          options={f.options.split(",").map((opt: string) => ({ value: opt, label: opt }))}
-          defaultValue={providerValues[f.name] || f.default || ""}
-          OnSave={(val: string) => setProviderValues((v: any) => ({ ...v, [f.name]: val }))}
-        />
-      ))}
-      {switchFields.map((f: any) => (
-        <SettingCardSwitch
-          key={f.name}
-          title={String(t(`${translationPrefix}.${f.name}`, f.name))}
-          defaultChecked={providerValues[f.name] !== undefined ? !!providerValues[f.name] : (f.default === "true" || f.default === true)}
-          onChange={(checked: boolean) => setProviderValues((v: any) => ({ ...v, [f.name]: checked }))}
-        />
-      ))}
-      {inputFields.length > 0 && (
-        <SettingCardMultiInputCollapse
-          title={String(t(`${translationPrefix}.provider_fields`))}
-          defaultOpen={true}
-          items={inputFields.map((f: any) => ({
-            tag: f.name,
-            label: String(t(`${translationPrefix}.${f.name}`, f.name)) + (f.required ? " *" : ""),
-            type: f.type === "int" ? "short" : "short", // 可以根据需要调整
-            defaultValue: providerValues[f.name] || f.default || "",
-            required: f.required,
-            number: f.type === "int",
-          }))}
-          onSave={async (values: any) => {
-            // 验证必填字段
-            const requiredFields = inputFields.filter((f: any) => f.required);
-            const missingFields = requiredFields.filter((f: any) => !values[f.name] || values[f.name].trim() === "");
-            
-            if (missingFields.length > 0) {
-              const fieldNames = missingFields.map((f: any) => t(`${translationPrefix}.${f.name}`, f.name)).join(", ");
-              toast.error(
-                t("settings.missing_required_fields", { fieldNames })
-              );
-              return;
-            }
-            
-            const allValues = { ...providerValues, ...values };
-            await handleSave(allValues);
-          }}
-        >
-          <label className="text-sm text-muted-foreground">
-            {footer}
-          </label>
-        </SettingCardMultiInputCollapse>
-      )}
-    </div>
-  );
+    const fields = providerDefs[currentProvider];
+    const selectFields = fields.filter((f: any) => f.type === "option" && f.options);
+    const switchFields = fields.filter((f: any) => f.type === "bool");
+    const inputFields = fields.filter((f: any) => f.type !== "option" && f.type !== "bool");
+
+    return (
+        <div key={currentProvider}>
+            {inputFields.length > 0 && (
+                <SettingCardMultiInputCollapse
+                    title={String(t(`${translationPrefix}.provider_fields`))}
+                    defaultOpen={true}
+                    items={inputFields.map((f: any) => ({
+                        tag: f.name,
+                        label: String(t(`${translationPrefix}.${f.name}`, f.name)) + (f.required ? " *" : ""),
+                        type: f.type === "int" ? "short" : "short", // 可以根据需要调整
+                        defaultValue: providerValues[f.name] || f.default || "",
+                        required: f.required,
+                        number: f.type === "int",
+                    }))}
+                    onSave={async (values: any) => {
+                        // 验证必填字段
+                        const requiredFields = inputFields.filter((f: any) => f.required);
+                        const missingFields = requiredFields.filter((f: any) => !values[f.name] || values[f.name].trim() === "");
+
+                        if (missingFields.length > 0) {
+                            const fieldNames = missingFields.map((f: any) => t(`${translationPrefix}.${f.name}`, f.name)).join(", ");
+                            toast.error(
+                                t("settings.missing_required_fields", { fieldNames })
+                            );
+                            return;
+                        }
+
+                        // 转换数字类型字段
+                        const processedValues = { ...values };
+                        inputFields.forEach((f: any) => {
+                            if (f.type === "int" && processedValues[f.name] !== undefined && processedValues[f.name] !== "") {
+                                const numValue = Number(processedValues[f.name]);
+                                if (!isNaN(numValue)) {
+                                    processedValues[f.name] = numValue;
+                                }
+                            }
+                        });
+
+                        const allValues = { ...providerValues, ...processedValues };
+                        await handleSave(allValues);
+                    }}
+                >
+                    {selectFields.map((f: any) => (
+                        <SettingCardSelect
+                            key={f.name}
+                            bordless
+                            title={String(t(`${translationPrefix}.${f.name}`, f.name))}
+                            options={f.options.split(",").map((opt: string) => ({ value: opt, label: opt }))}
+                            defaultValue={providerValues[f.name] || f.default || ""}
+                            OnSave={(val: string) => setProviderValues((v: any) => ({ ...v, [f.name]: val }))}
+                        />
+                    ))}
+                    {switchFields.map((f: any) => (
+                        <SettingCardSwitch
+                            bordless
+                            key={f.name}
+                            title={String(t(`${translationPrefix}.${f.name}`, f.name))}
+                            defaultChecked={providerValues[f.name] !== undefined ? !!providerValues[f.name] : (f.default === "true" || f.default === true)}
+                            onChange={(checked: boolean) => setProviderValues((v: any) => ({ ...v, [f.name]: checked }))}
+                        />
+                    ))}
+                    <label className="text-sm text-muted-foreground">
+                        {footer}
+                    </label>
+                </SettingCardMultiInputCollapse>
+            )}
+        </div>
+    );
 };
\ No newline at end of file
